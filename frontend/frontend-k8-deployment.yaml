---
apiVersion: v1
kind: Namespace
metadata:
  name: ui

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontendmap
  #namespace: ui
data:
    NODE_ENV: DEV
    REACT_APP_BACKEND_URL: "http://http://ac00b20cbf6d211e9b1b50ed95fc5aa0-786762308.us-east-1.elb.amazonaws.com"

---
apiVersion: apps/v1
kind: Deployment                 # Type of Kubernetes resource
metadata:
  name: node-recipe-frontend          # Name of the Kubernetes resource
  #namespace: ui
spec:
  replicas: 3                    # Number of pods to run at any given time
  #minReadySeconds: 45
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      app: node-recipe-frontend        # This deployment applies to any Pods matching the specified label
  template:                      # This deployment will create a set of pods using the configurations in this template
    metadata:
      labels:                    # The labels that will be applied to all of the pods in this deployment
        app: node-recipe-frontend
    spec:                        # Spec for the container which will run in the Pod
      containers:
      - name: node-recipe-server
        image: akmurgod/f19-t6-webapp-frontend:a195188554c19a2fd849cec9c0ac08a2ca97f790
        imagePullPolicy: IfNotPresent
        #resources:
                #requests:
                #memory: "128Mi"
                #cpu: "1000m"
                #limits:
                #memory: "128Mi"
                #cpu: "1000m"
        ports:
          - name : liveness-port
            containerPort: 3000  # Should match the port number that the nodejs application listens on
            hostPort: 3000
        envFrom:
        - configMapRef:
           name: frontendmap
        readinessProbe:
          tcpSocket:
            port: 3000
          initialDelaySeconds: 80
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: liveness-port
          initialDelaySeconds: 80
          periodSeconds: 3

---
apiVersion: v1
kind: Service                    # Type of kubernetes resource
metadata:
  #namespace: ui
  name: node-recipe-frontend   # Name of the resource
spec:
  ports:                         # Take incoming HTTP requests on port 9090 and forward them to the targetPort of 8080
  - name: http
    port: 80
    targetPort: 3000
  selector:
    app: node-recipe-frontend     # Map any pod with name go-hello-world to this service
  type: LoadBalancer

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: frontend-role
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - namespaces
  - pods
  - secrets
  verbs:
  - get

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: frontend-serviceaccount
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
 name: frontend-role-binding
 namespace: default
subjects:
- kind: ServiceAccount
  name: frontend-serviceaccount
  namespace: default
roleRef:
  kind: Role
  name: frontend-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: example-ingress
  annotations:
    ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
        - path: / # --> Change this
          backend:
            serviceName: node-recipe-frontend
            servicePort: 3000
